{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/data-model.js","src/domain/edge.js","src/domain/index.js","src/domain/node/chance-node.js","src/domain/node/decision-node.js","src/domain/node/node.js","src/domain/node/terminal-node.js","src/domain/object-with-computed-values.js","src/domain/object-with-id-and-editable-fields.js","src/domain/point.js","src/domain/text.js","src/index.js","src/validation-result.js","index.js"],"names":["require","r","e","n","t","o","i","f","c","u","a","Error","code","p","exports","call","length","1","module","_sdUtils","domain","_interopRequireWildcard","_validationResult","DataModel","data","_classCallCheck","this","nodes","edges","texts","payoffNames","defaultCriterion1Weight","weightLowerBound","weightUpperBound","Infinity","expressionScope","$codeError","$codeDirty","$version","validationResults","maxStackSize","undoStack","redoStack","undoRedoStateChangedCallback","nodeAddedCallback","nodeRemovedCallback","textAddedCallback","textRemovedCallback","callbacksDisabled","load","filterLocation","arguments","undefined","filterComputed","replacer","filterPrivate","k","v","Utils","startsWith","stringify","trees","getRoots","slice","getJsonReplacer","_this","clear","forEach","nodeData","createNodeFromData","textData","location","Point","x","y","text","Text","value","push","clearExpressionScope","extend","serializedData","serialize","dto","dataReviver","_this2","JSON","parse","ValidationResult","createFromDTO","dataModel","log","warn","byId","id","loadComputedValues","computed","filterFunction","res","forOwn","key","isFunction","parent","node","_this3","DecisionNode","$TYPE","type","ChanceNode","TerminalNode","$fieldStatus","name","folded","edgeOrNode","addNode","childEdges","ed","edge","childNode","isArray","payoff","probability","_addChild","_fireNodeAddedCallback","parentNode","child","$parent","Edge","_setEdgeInitialProbability","$l","self","removeNode","_removeNode","parentEdge","find","removeEdge","_removeEdge","_fireNodeRemovedCallback","_this4","findSubtreeRoots","typeToConvertTo","newNode","_this5","createNodeByType","replaceNode","oldNode","index","indexOf","filter","nodeToCopy","cloneComputedValues","clone","cloneNode","childClone","cloneSubtree","guid","cloneDeep","nodeToAttach","nodeOrEdge","getAllDescendantEdges","findNodeById","findEdgeById","splice","nodesToRemove","edgesToRemove","result","apply","_toConsumableArray","getAllDescendantNodes","descendants","unshift","revertConf","state","_pushToStack","_fireUndoRedoCallback","saveStateFromSnapshot","createStateSnapshot","newState","pop","_setNewState","clearComputedValues","_fireTextAddedCallback","_this6","removeText","_fireTextRemovedCallback","_this7","reverse","redo","nodeById","getObjectByIdMap","edgeById","onUndo","onRedo","stack","obj","shift","_objectWithComputedValues","ObjectWithComputedValues","_super","$DISPLAY_VALUE_NAMES","val","computedValue","displayValue","_node","Object","keys","defineProperty","enumerable","get","_decisionNode","_chanceNode","_terminalNode","_edge","_point","_text","Node","withChildren","dx","dy","move","moveTo","_objectWithIdAndEditableFields","ObjectWithIdAndEditableFields","ruleName","fieldPath","path","set","$ObjectWithIdAndEditableFields","valid","syntax","getFieldStatus","fieldStatus","Array","_dataModel","prototype","hasOwnProperty","_exportNames","errors","warnings","objectIdToError","error","isString","errorsByName","objE","getOwnPropertyNames","_index"],"mappings":"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","file":"sd-model.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import {Utils, log} from \"sd-utils\";\nimport * as domain from \"./domain\";\nimport {ValidationResult} from \"./validation-result\";\n\n/*\n * Data model manager\n * */\nexport class DataModel {\n\n    nodes = [];\n    edges = [];\n\n    texts = []; //floating texts\n    payoffNames = [];\n    defaultCriterion1Weight = 1;\n    weightLowerBound = 0;\n    weightUpperBound = Infinity;\n\n\n    expressionScope = {}; //global expression scope\n    code = \"\";//global expression code\n    $codeError = null; //code evaluation errors\n    $codeDirty = false; // is code changed without reevaluation?\n    $version=1;\n\n    validationResults = [];\n\n    // undo / redo\n    maxStackSize = 20;\n    undoStack = [];\n    redoStack = [];\n    undoRedoStateChangedCallback = null;\n    nodeAddedCallback = null;\n    nodeRemovedCallback = null;\n\n    textAddedCallback = null;\n    textRemovedCallback = null;\n\n    callbacksDisabled = false;\n\n    constructor(data) {\n        if(data){\n            this.load(data);\n        }\n    }\n\n    getJsonReplacer(filterLocation=false, filterComputed=false, replacer, filterPrivate =true){\n        return function (k, v) {\n\n            if ((filterPrivate && Utils.startsWith(k, '$')) || k == 'parentNode') {\n                return undefined;\n            }\n            if (filterLocation && k == 'location') {\n                return undefined;\n            }\n            if (filterComputed && k == 'computed') {\n                return undefined;\n            }\n\n            if (replacer){\n                return replacer(k, v);\n            }\n\n            return v;\n        }\n    }\n\n    serialize(stringify=true, filterLocation=false, filterComputed=false, replacer, filterPrivate =true){\n        var data =  {\n            code: this.code,\n            expressionScope: this.expressionScope,\n            trees: this.getRoots(),\n            texts: this.texts,\n            payoffNames: this.payoffNames.slice(),\n            defaultCriterion1Weight: this.defaultCriterion1Weight,\n            weightLowerBound: this.weightLowerBound,\n            weightUpperBound: this.weightUpperBound\n        };\n\n        if(!stringify){\n            return data;\n        }\n\n        return Utils.stringify(data, this.getJsonReplacer(filterLocation, filterComputed, replacer, filterPrivate), []);\n    }\n\n\n    /*Loads serialized data*/\n    load(data) {\n        //roots, texts, code, expressionScope\n        var callbacksDisabled = this.callbacksDisabled;\n        this.callbacksDisabled = true;\n\n        this.clear();\n\n\n        data.trees.forEach(nodeData=> {\n            var node = this.createNodeFromData(nodeData);\n        });\n\n        if (data.texts) {\n            data.texts.forEach(textData=> {\n                var location = new domain.Point(textData.location.x, textData.location.y);\n                var text = new domain.Text(location, textData.value);\n                this.texts.push(text);\n            })\n        }\n\n        this.clearExpressionScope();\n        this.code = data.code || '';\n\n        if (data.expressionScope) {\n            Utils.extend(this.expressionScope, data.expressionScope);\n        }\n\n        if (data.payoffNames !== undefined && data.payoffNames !== null) {\n            this.payoffNames = data.payoffNames;\n        }\n\n        if (data.defaultCriterion1Weight !== undefined && data.defaultCriterion1Weight !== null) {\n            this.defaultCriterion1Weight = data.defaultCriterion1Weight;\n        }\n\n        if (data.weightLowerBound !== undefined && data.weightLowerBound !== null) {\n            this.weightLowerBound = data.weightLowerBound;\n        }\n\n        if (data.weightUpperBound !== undefined && data.weightUpperBound !== null) {\n            this.weightUpperBound = data.weightUpperBound;\n        }\n\n\n        this.callbacksDisabled = callbacksDisabled;\n    }\n\n    getDTO(filterLocation=false, filterComputed=false, filterPrivate =false){\n        var dto = {\n            serializedData: this.serialize(true, filterLocation, filterComputed, null, filterPrivate),\n            $codeError: this.$codeError,\n            $codeDirty: this.$codeDirty,\n            validationResults: this.validationResults.slice()\n\n        };\n        return dto\n    }\n\n    loadFromDTO(dto, dataReviver){\n        this.load(JSON.parse(dto.serializedData, dataReviver));\n        this.$codeError = dto.$codeError;\n        this.$codeDirty = dto.$codeDirty;\n        this.validationResults.length=0;\n        dto.validationResults.forEach(v=>{\n            this.validationResults.push(ValidationResult.createFromDTO(v))\n        })\n    }\n\n    /*This method updates only computation results/validation*/\n    updateFrom(dataModel){\n        if(this.$version>dataModel.$version){\n            log.warn(\"DataModel.updateFrom: version of current model greater than update\")\n            return;\n        }\n        var byId = {}\n        dataModel.nodes.forEach(n=>{\n            byId[n.id] = n;\n        });\n        this.nodes.forEach((n,i)=>{\n            if(byId[n.id]){\n                n.loadComputedValues(byId[n.id].computed);\n            }\n        });\n        dataModel.edges.forEach(e=>{\n            byId[e.id] = e;\n        });\n        this.edges.forEach((e,i)=>{\n            if(byId[e.id]){\n                e.loadComputedValues(byId[e.id].computed);\n            }\n        });\n        this.expressionScope = dataModel.expressionScope;\n        this.$codeError = dataModel.$codeError;\n        this.$codeDirty = dataModel.$codeDirty;\n        this.validationResults  = dataModel.validationResults;\n    }\n\n    getGlobalVariableNames(filterFunction = true){\n        var res = [];\n        Utils.forOwn(this.expressionScope, (value, key)=>{\n            if(filterFunction && Utils.isFunction(value)){\n                return;\n            }\n            res.push(key);\n        });\n        return res;\n    }\n\n    /*create node from serialized data*/\n    createNodeFromData(data, parent) {\n        var node, location;\n\n        if(data.location){\n            location = new domain.Point(data.location.x, data.location.y);\n        }else{\n            location = new domain.Point(0,0);\n        }\n\n        if (domain.DecisionNode.$TYPE == data.type) {\n            node = new domain.DecisionNode(location);\n        } else if (domain.ChanceNode.$TYPE == data.type) {\n            node = new domain.ChanceNode(location);\n        } else if (domain.TerminalNode.$TYPE == data.type) {\n            node = new domain.TerminalNode(location);\n        }\n        if(data.id){\n            node.id = data.id;\n        }\n        if(data.$fieldStatus){\n            node.$fieldStatus = data.$fieldStatus;\n        }\n        node.name = data.name;\n\n        if(data.code){\n            node.code = data.code;\n        }\n        if (data.expressionScope) {\n            node.expressionScope = data.expressionScope\n        }\n        if(data.computed){\n            node.loadComputedValues(data.computed);\n        }\n\n        node.folded = !!data.folded;\n\n        var edgeOrNode = this.addNode(node, parent);\n        data.childEdges.forEach(ed=> {\n            var edge = this.createNodeFromData(ed.childNode, node);\n            if(Utils.isArray(ed.payoff)){\n                edge.payoff = ed.payoff;\n            }else{\n                edge.payoff = [ed.payoff, 0];\n            }\n\n            edge.probability = ed.probability;\n            edge.name = ed.name;\n            if(ed.computed){\n                edge.loadComputedValues(ed.computed);\n            }\n            if(ed.id){\n                edge.id = ed.id;\n            }\n            if(ed.$fieldStatus){\n                edge.$fieldStatus = ed.$fieldStatus;\n            }\n        });\n\n        return edgeOrNode;\n    }\n\n    /*returns node or edge from parent to this node*/\n    addNode(node, parent) {\n        var self = this;\n        self.nodes.push(node);\n        if (parent) {\n            var edge = self._addChild(parent, node);\n            this._fireNodeAddedCallback(node);\n            return edge;\n        }\n\n        this._fireNodeAddedCallback(node);\n        return node;\n    }\n\n    /*injects given node into given edge*/\n    injectNode(node, edge) {\n        var parent = edge.parentNode;\n        var child = edge.childNode;\n        this.nodes.push(node);\n        node.$parent = parent;\n        edge.childNode = node;\n        this._addChild(node, child);\n        this._fireNodeAddedCallback(node);\n    }\n\n    _addChild(parent, child) {\n        var self = this;\n        var edge = new domain.Edge(parent, child);\n        self._setEdgeInitialProbability(edge);\n        self.edges.push(edge);\n\n        parent.childEdges.push(edge);\n        child.$parent = parent;\n        return edge;\n    }\n\n    _setEdgeInitialProbability(edge) {\n        if (edge.parentNode instanceof domain.ChanceNode) {\n            edge.probability = '#';\n        } else {\n            edge.probability = undefined;\n        }\n\n    }\n\n    /*removes given node and its subtree*/\n    removeNode(node, $l = 0) {\n\n        var self = this;\n        node.childEdges.forEach(e=>self.removeNode(e.childNode, $l + 1));\n\n        self._removeNode(node);\n        var parent = node.$parent;\n        if (parent) {\n            var parentEdge = Utils.find(parent.childEdges, (e, i)=> e.childNode === node);\n            if ($l == 0) {\n                self.removeEdge(parentEdge);\n            } else {\n                self._removeEdge(parentEdge);\n            }\n        }\n        this._fireNodeRemovedCallback(node);\n    }\n\n    /*removes given nodes and their subtrees*/\n    removeNodes(nodes) {\n\n        var roots = this.findSubtreeRoots(nodes);\n        roots.forEach(n=>this.removeNode(n, 0), this);\n    }\n\n    convertNode(node, typeToConvertTo){\n        var newNode;\n        if(!node.childEdges.length && node.$parent){\n            newNode = this.createNodeByType(typeToConvertTo, node.location);\n        }else{\n            if(node instanceof domain.DecisionNode && typeToConvertTo==domain.ChanceNode.$TYPE){\n                newNode = this.createNodeByType(typeToConvertTo, node.location);\n            }else if(typeToConvertTo==domain.DecisionNode.$TYPE){\n                newNode = this.createNodeByType(typeToConvertTo, node.location);\n            }\n        }\n\n        if(newNode){\n            newNode.name=node.name;\n            this.replaceNode(newNode, node);\n            newNode.childEdges.forEach(e=>this._setEdgeInitialProbability(e));\n            this._fireNodeAddedCallback(newNode);\n        }\n\n    }\n\n    createNodeByType(type, location){\n        if(type==domain.DecisionNode.$TYPE){\n            return new domain.DecisionNode(location)\n        }else if(type==domain.ChanceNode.$TYPE){\n            return new domain.ChanceNode(location)\n        }else if(type==domain.TerminalNode.$TYPE){\n            return new domain.TerminalNode(location)\n        }\n    }\n\n    replaceNode(newNode, oldNode){\n        var parent = oldNode.$parent;\n        newNode.$parent = parent;\n\n        if(parent){\n            var parentEdge = Utils.find(newNode.$parent.childEdges, e=>e.childNode===oldNode);\n            parentEdge.childNode = newNode;\n        }\n\n        newNode.childEdges = oldNode.childEdges;\n        newNode.childEdges.forEach(e=>e.parentNode=newNode);\n\n        var index = this.nodes.indexOf(oldNode);\n        if(~index){\n            this.nodes[index]=newNode;\n        }\n    }\n\n    getRoots() {\n        return this.nodes.filter(n=>!n.$parent);\n    }\n\n    findSubtreeRoots(nodes) {\n        return nodes.filter(n=>!n.$parent || nodes.indexOf(n.$parent) === -1);\n    }\n\n    /*creates detached clone of given node*/\n    cloneSubtree(nodeToCopy, cloneComputedValues) {\n        var self = this;\n        var clone = this.cloneNode(nodeToCopy);\n\n        nodeToCopy.childEdges.forEach(e=> {\n            var childClone = self.cloneSubtree(e.childNode, cloneComputedValues);\n            childClone.$parent = clone;\n            var edge = Utils.clone(e);\n            edge.id = Utils.guid();\n            edge.parentNode = clone;\n            edge.childNode = childClone;\n            edge.payoff = Utils.cloneDeep(e.payoff);\n            edge.computed = {};\n            if (cloneComputedValues) {\n                edge.computed = Utils.cloneDeep(e.computed);\n                childClone.computed = Utils.cloneDeep(e.childNode.computed)\n            }\n            clone.childEdges.push(edge);\n        });\n        if (cloneComputedValues) {\n            clone.computed = Utils.cloneDeep(nodeToCopy.computed)\n        }\n        return clone;\n    }\n\n    /*attaches detached subtree to given parent*/\n    attachSubtree(nodeToAttach, parent) {\n        var self = this;\n        var nodeOrEdge = self.addNode(nodeToAttach, parent);\n\n        nodeToAttach.expressionScope = null;\n\n        var childEdges = self.getAllDescendantEdges(nodeToAttach);\n        childEdges.forEach(e=> {\n            self.edges.push(e);\n            self.nodes.push(e.childNode);\n            e.childNode.expressionScope = null;\n        });\n\n        return nodeOrEdge;\n    }\n\n    cloneNodes(nodes) {\n        var roots = []\n        //TODO\n    }\n\n    /*shallow clone without parent and children*/\n    cloneNode(node) {\n        var clone = Utils.clone(node)\n        clone.id = Utils.guid();\n        clone.location = Utils.clone(node.location);\n        clone.computed = Utils.clone(node.computed);\n        clone.$parent = null;\n        clone.childEdges = [];\n        return clone;\n    }\n\n    findNodeById(id) {\n        return Utils.find(this.nodes, n=>n.id == id);\n    }\n\n    findEdgeById(id) {\n        return Utils.find(this.edges, e=>e.id == id);\n    }\n\n    findById(id) {\n        var node = this.findNodeById(id);\n        if (node) {\n            return node;\n        }\n        return this.findEdgeById(id);\n    }\n\n    _removeNode(node) {// simply removes node from node list\n        var index = this.nodes.indexOf(node);\n        if (index > -1) {\n            this.nodes.splice(index, 1);\n        }\n    }\n\n    removeEdge(edge) {\n        var index = edge.parentNode.childEdges.indexOf(edge);\n        if (index > -1) {\n            edge.parentNode.childEdges.splice(index, 1);\n        }\n        this._removeEdge(edge);\n    }\n\n    _removeEdge(edge) { //removes edge from edge list without removing connected nodes\n        var index = this.edges.indexOf(edge);\n        if (index > -1) {\n            this.edges.splice(index, 1);\n        }\n    }\n\n    _removeNodes(nodesToRemove) {\n        this.nodes = this.nodes.filter(n=>nodesToRemove.indexOf(n) === -1);\n    }\n\n    _removeEdges(edgesToRemove) {\n        this.edges = this.edges.filter(e=>edgesToRemove.indexOf(e) === -1);\n    }\n\n    getAllDescendantEdges(node) {\n        var self = this;\n        var result = [];\n\n        node.childEdges.forEach(e=> {\n            result.push(e);\n            if (e.childNode) {\n                result.push(...self.getAllDescendantEdges(e.childNode));\n            }\n        });\n\n        return result;\n    }\n\n    getAllDescendantNodes(node) {\n        var self = this;\n        var result = [];\n\n        node.childEdges.forEach(e=> {\n            if (e.childNode) {\n                result.push(e.childNode);\n                result.push(...self.getAllDescendantNodes(e.childNode));\n            }\n        });\n\n        return result;\n    }\n\n    getAllNodesInSubtree(node) {\n        var descendants = this.getAllDescendantNodes(node);\n        descendants.unshift(node);\n        return descendants;\n    }\n\n    isUndoAvailable() {\n        return !!this.undoStack.length\n    }\n\n    isRedoAvailable() {\n        return !!this.redoStack.length\n    }\n\n    createStateSnapshot(revertConf){\n        return {\n            revertConf: revertConf,\n            nodes: Utils.cloneDeep(this.nodes),\n            edges: Utils.cloneDeep(this.edges),\n            texts: Utils.cloneDeep(this.texts),\n            payoffNames: Utils.cloneDeep(this.payoffNames),\n            defaultCriterion1Weight: Utils.cloneDeep(this.defaultCriterion1Weight),\n            weightLowerBound: Utils.cloneDeep(this.weightLowerBound),\n            weightUpperBound: Utils.cloneDeep(this.weightUpperBound),\n            expressionScope: Utils.cloneDeep(this.expressionScope),\n            code: this.code,\n            $codeError: this.$codeError\n        }\n    }\n\n\n    saveStateFromSnapshot(state){\n        this.redoStack.length = 0;\n\n        this._pushToStack(this.undoStack, state);\n\n        this._fireUndoRedoCallback();\n\n        return this;\n    }\n\n    saveState(revertConf) {\n        this.saveStateFromSnapshot(this.createStateSnapshot(revertConf));\n        return this;\n    }\n\n    undo() {\n        var self = this;\n        var newState = this.undoStack.pop();\n        if (!newState) {\n            return;\n        }\n\n        this._pushToStack(this.redoStack, {\n            revertConf: newState.revertConf,\n            nodes: self.nodes,\n            edges: self.edges,\n            texts: self.texts,\n            payoffNames: self.payoffNames,\n            defaultCriterion1Weight: self.defaultCriterion1Weight,\n            weightLowerBound: self.weightLowerBound,\n            weightUpperBound: self.weightUpperBound,\n            expressionScope: self.expressionScope,\n            code: self.code,\n            $codeError: self.$codeError\n\n        });\n\n        this._setNewState(newState);\n\n        this._fireUndoRedoCallback();\n\n        return this;\n    }\n\n    redo() {\n        var self = this;\n        var newState = this.redoStack.pop();\n        if (!newState) {\n            return;\n        }\n\n        this._pushToStack(this.undoStack, {\n            revertConf: newState.revertConf,\n            nodes: self.nodes,\n            edges: self.edges,\n            texts: self.texts,\n            payoffNames: self.payoffNames,\n            defaultCriterion1Weight: self.defaultCriterion1Weight,\n            weightLowerBound: self.weightLowerBound,\n            weightUpperBound: self.weightUpperBound,\n            expressionScope: self.expressionScope,\n            code: self.code,\n            $codeError: self.$codeError\n        });\n\n        this._setNewState(newState, true);\n\n        this._fireUndoRedoCallback();\n\n        return this;\n    }\n\n    clear() {\n        this.nodes.length = 0;\n        this.edges.length = 0;\n        this.undoStack.length = 0;\n        this.redoStack.length = 0;\n        this.texts.length = 0;\n        this.clearExpressionScope();\n        this.code = '';\n        this.$codeError = null;\n        this.$codeDirty = false;\n\n        this.payoffNames = [];\n        this.defaultCriterion1Weight = 1;\n        this.weightLowerBound = 0;\n        this.weightUpperBound = Infinity;\n    }\n\n    clearComputedValues(){\n        this.nodes.forEach(n=>n.clearComputedValues());\n        this.edges.forEach(e=>e.clearComputedValues());\n    }\n\n    addText(text) {\n        this.texts.push(text);\n\n        this._fireTextAddedCallback(text);\n    }\n\n    removeTexts(texts) {\n        texts.forEach(t=>this.removeText(t));\n    }\n\n    removeText(text) {\n        var index = this.texts.indexOf(text);\n        if (index > -1) {\n            this.texts.splice(index, 1);\n            this._fireTextRemovedCallback(text);\n        }\n    }\n\n    clearExpressionScope() {\n        Utils.forOwn(this.expressionScope, (value, key)=> {\n            delete this.expressionScope[key];\n        });\n    }\n\n    reversePayoffs(){\n        this.payoffNames.reverse();\n        this.edges.forEach(e=>e.payoff.reverse())\n    }\n\n    _setNewState(newState, redo) {\n        var nodeById = Utils.getObjectByIdMap(newState.nodes);\n        var edgeById = Utils.getObjectByIdMap(newState.edges);\n        this.nodes = newState.nodes;\n        this.edges = newState.edges;\n        this.texts = newState.texts;\n        this.payoffNames = newState.payoffNames;\n        this.defaultCriterion1Weight = newState.defaultCriterion1Weight;\n        this.weightLowerBound = newState.weightLowerBound;\n        this.weightUpperBound = newState.weightUpperBound;\n        this.expressionScope = newState.expressionScope;\n        this.code = newState.code;\n        this.$codeError  = newState.$codeError\n\n        this.nodes.forEach(n=> {\n            for (var i = 0; i < n.childEdges.length; i++) {\n                var edge = edgeById[n.childEdges[i].id];\n                n.childEdges[i] = edge;\n                edge.parentNode = n;\n                edge.childNode = nodeById[edge.childNode.id];\n            }\n\n        });\n\n        if (newState.revertConf) {\n            if (!redo && newState.revertConf.onUndo) {\n                newState.revertConf.onUndo(newState.revertConf.data);\n            }\n            if (redo && newState.revertConf.onRedo) {\n                newState.revertConf.onRedo(newState.revertConf.data);\n            }\n\n\n        }\n        this.revertConf = newState.revertConf;\n    }\n\n\n    _pushToStack(stack, obj) {\n        if (stack.length >= this.maxStackSize) {\n            stack.shift();\n        }\n        stack.push(obj);\n    }\n\n    _fireUndoRedoCallback() {\n        if (!this.callbacksDisabled && this.undoRedoStateChangedCallback) {\n            this.undoRedoStateChangedCallback();\n        }\n    }\n\n    _fireNodeAddedCallback(node) {\n        if (!this.callbacksDisabled && this.nodeAddedCallback) {\n            this.nodeAddedCallback(node);\n        }\n    }\n\n    _fireNodeRemovedCallback(node) {\n        if (!this.callbacksDisabled && this.nodeRemovedCallback) {\n            this.nodeRemovedCallback(node);\n        }\n    }\n\n    _fireTextAddedCallback(text) {\n        if (!this.callbacksDisabled && this.textAddedCallback) {\n            this.textAddedCallback(text);\n        }\n    }\n\n    _fireTextRemovedCallback(text) {\n        if (!this.callbacksDisabled && this.textRemovedCallback) {\n            this.textRemovedCallback(text);\n        }\n    }\n}\n","import {ObjectWithComputedValues} from \"./object-with-computed-values\";\n\nexport class Edge extends ObjectWithComputedValues {\n    parentNode;\n    childNode;\n\n    name = '';\n    probability = undefined;\n    payoff = [0, 0];\n\n    $DISPLAY_VALUE_NAMES = ['probability', 'payoff', 'optimal'];\n\n    constructor(parentNode, childNode, name, payoff, probability,) {\n        super();\n        this.parentNode = parentNode;\n        this.childNode = childNode;\n\n        if (name !== undefined) {\n            this.name = name;\n        }\n        if (probability !== undefined) {\n            this.probability = probability;\n        }\n        if (payoff !== undefined) {\n            this.payoff = payoff\n        }\n\n    }\n\n    setName(name) {\n        this.name = name;\n        return this;\n    }\n\n    setProbability(probability) {\n        this.probability = probability;\n        return this;\n    }\n\n    setPayoff(payoff, index = 0) {\n        this.payoff[index] = payoff;\n        return this;\n    }\n\n    computedBaseProbability(val) {\n        return this.computedValue(null, 'probability', val);\n    }\n\n    computedBasePayoff(val, index = 0) {\n        return this.computedValue(null, 'payoff[' + index + ']', val);\n    }\n\n    displayProbability(val) {\n        return this.displayValue('probability', val);\n    }\n\n    displayPayoff(val, index = 0) {\n        return this.displayValue('payoff[' + index + ']', val);\n    }\n}\n","export * from './node/node'\nexport * from './node/decision-node'\nexport * from './node/chance-node'\nexport * from './node/terminal-node'\nexport * from './edge'\nexport * from './point'\nexport * from './text'\n","import {Node} from './node'\n\nexport class ChanceNode extends Node{\n\n    static $TYPE = 'chance';\n\n    constructor(location){\n        super(ChanceNode.$TYPE, location);\n    }\n}\n","import {Node} from './node'\n\nexport class DecisionNode extends Node{\n\n    static $TYPE = 'decision';\n\n    constructor(location){\n        super(DecisionNode.$TYPE, location);\n    }\n}\n","import {Point} from '../point'\nimport {ObjectWithComputedValues} from '../object-with-computed-values'\n\nexport class Node extends ObjectWithComputedValues{\n\n    type;\n    childEdges=[];\n    name='';\n\n    location; //Point\n\n    code='';\n    $codeDirty = false; // is code changed without reevaluation?\n    $codeError = null; //code evaluation errors\n\n    expressionScope=null;\n\n    folded = false; // is node folded along with its subtree\n\n    $DISPLAY_VALUE_NAMES = ['childrenPayoff', 'aggregatedPayoff', 'probabilityToEnter', 'optimal']\n\n    constructor(type, location){\n        super();\n        this.location=location;\n        if(!location){\n            this.location = new Point(0,0);\n        }\n        this.type=type;\n    }\n\n    setName(name){\n        this.name = name;\n        return this;\n    }\n\n    moveTo(x,y, withChildren){ //move to new location\n        if(withChildren){\n            var dx = x-this.location.x;\n            var dy = y-this.location.y;\n            this.childEdges.forEach(e=>e.childNode.move(dx, dy, true))\n        }\n\n        this.location.moveTo(x,y);\n        return this;\n    }\n\n    move(dx, dy, withChildren){ //move by vector\n        if(withChildren){\n            this.childEdges.forEach(e=>e.childNode.move(dx, dy, true))\n        }\n        this.location.move(dx, dy);\n        return this;\n    }\n}\n","import {Node} from './node'\n\nexport class TerminalNode extends Node{\n\n    static $TYPE = 'terminal';\n\n    constructor(location){\n        super(TerminalNode.$TYPE, location);\n    }\n}\n","import {Utils} from 'sd-utils'\n\nimport {ObjectWithIdAndEditableFields} from \"./object-with-id-and-editable-fields\";\n\nexport class ObjectWithComputedValues extends ObjectWithIdAndEditableFields{\n\n    computed={}; //computed values\n\n    /*get or set computed value*/\n    computedValue(ruleName, fieldPath, value){\n        var path = 'computed.';\n        if(ruleName){\n            path+=ruleName+'.';\n        }\n        path+=fieldPath;\n        if(value===undefined){\n            return  Utils.get(this, path, null);\n        }\n        Utils.set(this, path, value);\n        return value;\n    }\n\n    clearComputedValues(ruleName){\n        if(ruleName==undefined){\n            this.computed={};\n            return;\n        }\n        if(Utils.isArray(ruleName)){\n            ruleName.forEach(n=>{\n                this.computed[n]={};\n            });\n            return;\n        }\n        this.computed[ruleName]={};\n    }\n\n    clearDisplayValues(){\n        this.computed['$displayValues']={};\n    }\n\n    displayValue(fieldPath, value){\n        return this.computedValue(null, '$displayValues.'+fieldPath, value);\n    }\n\n    loadComputedValues(computed){\n        this.computed = Utils.cloneDeep(computed);\n    }\n}\n","import {Utils} from 'sd-utils'\n\nexport class ObjectWithIdAndEditableFields {\n\n    id = Utils.guid(); //internal id\n    $fieldStatus={};\n\n    $ObjectWithIdAndEditableFields = true;\n\n    getFieldStatus(fieldPath){\n        if(!Utils.get(this.$fieldStatus, fieldPath, null)){\n            Utils.set(this.$fieldStatus, fieldPath, {\n                valid: {\n                    syntax: true,\n                    value: true\n                }\n            });\n        }\n        return Utils.get(this.$fieldStatus, fieldPath);\n    }\n\n    setSyntaxValidity(fieldPath, valid){\n        var fieldStatus = this.getFieldStatus(fieldPath);\n        fieldStatus.valid.syntax = valid;\n    }\n\n    setValueValidity(fieldPath, valid){\n        var fieldStatus = this.getFieldStatus(fieldPath);\n        fieldStatus.valid.value = valid;\n    }\n\n    isFieldValid(fieldPath, syntax=true, value=true){\n        var fieldStatus = this.getFieldStatus(fieldPath);\n        if(syntax && value) {\n            return fieldStatus.valid.syntax && fieldStatus.valid.value;\n        }\n        if(syntax) {\n            return fieldStatus.valid.syntax\n        }\n        return fieldStatus.valid.value;\n    }\n\n\n}\n","export class Point {\n    x;\n    y;\n    constructor(x,y){\n        if(x instanceof Point){\n            y=x.y;\n            x=x.x\n        }else if(Array.isArray(x)){\n            y=x[1];\n            x=x[0];\n        }\n        this.x=x;\n        this.y=y;\n    }\n\n    moveTo(x,y){\n        if(Array.isArray(x)){\n            y=x[1];\n            x=x[0];\n        }\n        this.x=x;\n        this.y=y;\n        return this;\n    }\n\n    move(dx,dy){ //move by vector\n        if(Array.isArray(dx)){\n            dy=dx[1];\n            dx=dx[0];\n        }\n        this.x+=dx;\n        this.y+=dy;\n        return this;\n    }\n\n}\n","import {Point} from \"./point\";\nimport {Utils} from \"sd-utils\";\nimport {ObjectWithIdAndEditableFields} from \"./object-with-id-and-editable-fields\";\n\nexport class Text extends ObjectWithIdAndEditableFields{\n\n    value='';\n    location; //Point\n\n    constructor(location, value){\n        super();\n        this.location=location;\n        if(!location){\n            this.location = new Point(0,0);\n        }\n\n        if(value) {\n            this.value = value;\n        }\n    }\n\n    moveTo(x,y){ //move to new location\n        this.location.moveTo(x,y);\n        return this;\n    }\n\n    move(dx, dy){ //move by vector\n        this.location.move(dx, dy);\n        return this;\n    }\n}\n","import * as domain from './domain'\nexport {domain}\nexport * from './data-model'\nexport * from './validation-result'\n","import {Utils} from \"sd-utils\";\n\nexport class ValidationResult{\n\n\n    errors = {};\n    warnings = {};\n    objectIdToError={};\n\n    addError(error, obj){\n        if(Utils.isString(error)){\n            error = {name: error};\n        }\n        var name = error.name;\n        var errorsByName = this.errors[name];\n        if(!errorsByName){\n            errorsByName=[];\n            this.errors[name]=errorsByName;\n        }\n        var objE = this.objectIdToError[obj.id];\n        if(!objE){\n            objE=[];\n            this.objectIdToError[obj.id]= objE;\n        }\n        errorsByName.push(obj);\n        objE.push(error);\n    }\n\n    addWarning(name, obj){\n        var e = this.warnings[name];\n        if(!e){\n            e=[];\n            this.warnings[name]=e;\n        }\n        e.push(obj)\n    }\n\n    isValid(){\n        return Object.getOwnPropertyNames(this.errors).length === 0\n    }\n\n    static createFromDTO(dto){\n        var v = new ValidationResult();\n        v.errors = dto.errors;\n        v.warnings = dto.warnings;\n        v.objectIdToError = dto.objectIdToError;\n        return v;\n    }\n}\n","export * from './src/index'\n"]}